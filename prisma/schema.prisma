generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model orders {
  order_id   Int       @id @default(autoincrement())
  product_id Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  user_id    Int?
  quantity   Int?
  products   products? @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model products {
  product_id          Int           @id @default(autoincrement())
  user_id             Int?
  product_name        String?       @db.VarChar(255)
  product_description String?
  price               Float         @default(0)
  category            String        @db.VarChar(50)
  quantity            Int           @default(0)
  product_img         String?       @db.VarChar(255)
  status              productStatus @default(available)
  orders              orders[]
  users               users?        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  reviews             reviews[]
}

model users {
  user_id           Int         @id @default(autoincrement())
  username          String?     @unique @db.VarChar(50)
  first_name        String      @db.VarChar(50)
  last_name         String      @db.VarChar(50)
  avatar            String?     @db.VarChar(255)
  billing_address   String?     @db.VarChar(255)
  shipping_address  String?     @db.VarChar(255)
  phone_number      String?     @db.VarChar(15)
  date_of_birth     DateTime?   @db.Date
  order_history     Json[]
  created_at        DateTime?   @default(now()) @db.Timestamp(6)
  last_login_at     DateTime?   @db.Timestamp(6)
  modified_at       DateTime?   @db.Timestamp(6)
  verified          Boolean?    @default(false)
  user_role         String?     @db.VarChar(20)
  email             String      @unique @db.VarChar(50)
  passwordhash      String      @unique @db.VarChar(255)
  verificationtoken String?     @db.VarChar(255)
  cart_id           Int?
  orders            orders[]
  products          products[]
  reviews           reviews[]
  wishlists         wishlists[]

  @@index([verificationtoken], map: "idx_verificationtoken")
}

model reviews {
  review_id  Int       @id @default(autoincrement())
  user_id    Int
  username   String
  content    String
  rating     Float
  product_id Int?
  products   products? @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model wishlists {
  wishlist_id Int     @id @default(autoincrement())
  user_id     Int
  product_id  Int
  link        String?
  product_img String?
  users       users   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model cart {
  cart_id     Int       @id @default(autoincrement())
  user_id     Int
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  modified_at DateTime? @db.Timestamp(6)
}

model cart_items {
  item_id    Int       @id @default(autoincrement())
  cart_id    Int
  product_id Int
  quantity   Int       @default(1)
  price      Float
  discount   Float     @default(0)
  added_at   DateTime? @default(now()) @db.Timestamp(6)

  @@unique([cart_id, product_id], map: "unique_constraint")
}

enum productStatus {
  available
  outofstock
}
